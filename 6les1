#1. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках
# первых трех уроков. Проанализировать результат и определить программы с наиболее эффективным использованием
# памяти.
# Примечание: Для анализа возьмите любые 1-3 ваших программы или несколько вариантов кода для одной и
# той же задачи. Результаты анализа вставьте в виде комментариев к коду.
# Также укажите в комментариях версию Python и разрядность вашей ОС.

''' Версия Python: python 3.9 x64
ОС: Windows 10 x64 '''


# Посчитать четные и нечетные цифры введенного натурального числа.
# Например, если введено число 34560, то у него 3 четные цифры (4, 6 и 0) и 2 нечетные (3 и 5).

import sys

n = int(input('Ввести число:'))
even=odd=0
while n>0:
    if n%2 == 0:
        even += 1
    else:
        odd += 1
    n = n//10
print("четных - %d, нечетных - %d" % (even, odd))

member = sys.getsizeof(n)
print('В программе задействовано байт памяти: {}'.format(member))

member = sys.getsizeof(even)
print('В программе задействовано байт памяти: {}'.format(member))

member = sys.getsizeof(odd)
print('В программе задействовано байт памяти: {}'.format(member))

sum_member = sys.getsizeof(n) + sys.getsizeof(even) + sys.getsizeof(odd)
print('Всего в программе задействовано байт памяти: {}'.format(sum_member))

#В программе задействовано байт памяти: 24
#В программе задействовано байт памяти: 28
#В программе задействовано байт памяти: 28
#Всего в программе задействовано байт памяти: 80


# Найти сумму и произведение цифр трехзначного числа, которое вводит пользователь.
import sys

n = input("Введите трехзначное число: ")
n = int(n)

d1 = n % 10
n = n // 10
d2 = n % 10
n = n // 10

print("Сумма цифр числа:", n + d1 + d2)
print("Произведение числа:", n * d1 * d2)

member = sys.getsizeof(n)
print('В программе задействовано байт памяти: {}'.format(member))

member = sys.getsizeof(d1)
print('В программе задействовано байт памяти: {}'.format(member))

member = sys.getsizeof(d2)
print('В программе задействовано байт памяти: {}'.format(member))

sum_member = sys.getsizeof(n) + sys.getsizeof(d1) + sys.getsizeof(d2)
print('Всего в программе задействовано байт памяти: {}'.format(sum_member))

# В программе задействовано байт памяти: 28
# В программе задействовано байт памяти: 28
# В программе задействовано байт памяти: 28
# Всего в программе задействовано байт памяти: 84


#В диапазоне натуральных чисел от 2 до 99 определить,
# сколько из них кратны каждому из чисел в диапазоне от 2 до 9.
import sys

a = [0]*8
for i in range(2,100):
    for j in range(2,10):
        if i%j == 0:
            a[j-2] += 1
i = 0
while i < len(a):
    print(i+2, ' - ', a[i])
    i += 1
member = sys.getsizeof(i)
print('В программе задействовано байт памяти: {}'.format(member))
member = sys.getsizeof(a)
print('В программе задействовано байт памяти: {}'.format(member))
sum_member = sys.getsizeof(i) + sys.getsizeof(a)
print('В программе задействовано байт памяти: {}'.format(sum_member))

# В программе задействовано байт памяти: 28
# В программе задействовано байт памяти: 120
# В программе задействовано байт памяти: 148

#ИТОГ: Судя по данным, программы с наиболее эффективным использованием памяти - это первая и вторая.
#Менее всего памяти требует первая программа.
# Третья  программа занимает наибольший объем памяти.
